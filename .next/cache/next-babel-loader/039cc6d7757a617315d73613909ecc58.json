{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { push } from 'connected-react-router';\nimport { getRequest } from '../../services/requestService';\nimport * as types from './types';\nimport { buildSearchUrl } from '../../services/urlBuilderService';\nexport const getCountries = () => async dispatch => {\n  const res = await getRequest('/placements/getPlacementsData');\n\n  const payload = _objectSpread({\n    isLoading: false\n  }, res.data);\n\n  dispatch({\n    type: types.SET_COUNTRIES,\n    payload\n  });\n  return payload;\n};\nexport const getPlaceDetails = placeId => async dispatch => {\n  const res = await getRequest(`/placements/getPlaceDetails?placeId=${placeId}`);\n  dispatch({\n    type: types.SET_PLACE_DETAILS,\n    payload: _objectSpread({\n      isLoading: false\n    }, res.data)\n  });\n};\nexport function setSearchModalState(isSearchOpen) {\n  return {\n    type: types.SET_MODAL_STATE,\n    payload: {\n      isSearchOpen\n    }\n  };\n}\nexport const searchQuery = (query = '') => async dispatch => {\n  const firstPayload = {\n    isSearchLoading: true,\n    query\n  };\n\n  if (!query) {\n    firstPayload.autocompleteList = [];\n    firstPayload.isSearchLoading = false;\n  }\n\n  dispatch({\n    type: types.SEARCH_QUERY,\n    payload: firstPayload\n  });\n\n  if (query) {\n    const res = await getRequest(`webSearch/searchByQuery?query=${query}`);\n    dispatch({\n      type: types.SEARCH_QUERY,\n      payload: {\n        autocompleteList: res.data,\n        isSearchLoading: false\n      }\n    });\n  }\n};\nexport const navigateSearchBySubCategory = (selectedPlace, subCategory) => async dispatch => {\n  const targetUrl = buildSearchUrl({\n    placeId: selectedPlace._id,\n    subCategoryId: subCategory._id\n  });\n  dispatch(push(targetUrl));\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload: {\n      isLoading: true,\n      selectedSubCategory: subCategory\n    }\n  });\n};\nexport const searchBySubCategory = (placeId, subCategoryId) => async dispatch => {\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload: {\n      isLoading: true\n    }\n  });\n  const res = await getRequest(`webSearch/searchBySubCategory?placeId=${placeId}&subCategoryId=${subCategoryId}`);\n\n  const payload = _objectSpread({\n    isLoading: false\n  }, res.data);\n\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload\n  });\n  return payload;\n};","map":null,"metadata":{},"sourceType":"module"}