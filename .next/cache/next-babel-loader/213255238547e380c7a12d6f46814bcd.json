{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport { push } from 'connected-react-router';\nimport { connect } from 'react-redux';\nimport { setSearchModalState, searchQuery } from '../../../reducers/Search/actions';\nimport SearchBar from './Components/SearchBar';\nimport './index.scss';\nimport AutocompleteOptions from './Components/AutocompleteOptions'; // Modal.setAppElement('#react-root');\n\nModal.setAppElement('#__next');\n\nvar SearchModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchModal, _Component);\n\n  function SearchModal() {\n    _classCallCheck(this, SearchModal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SearchModal).apply(this, arguments));\n  }\n\n  _createClass(SearchModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var isSearchOpen = this.props.isSearchOpen;\n      return __jsx(Modal, {\n        id: \"searchModal\",\n        isOpen: isSearchOpen,\n        onRequestClose: function onRequestClose() {\n          return _this.props.setSearchModalState(false);\n        },\n        contentLabel: \"Example Modal\"\n      }, __jsx(SearchBar, this.props), __jsx(AutocompleteOptions, this.props));\n    }\n  }]);\n\n  return SearchModal;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var SearchReducer = _ref.SearchReducer;\n  var isSearchOpen = SearchReducer.isSearchOpen,\n      isSearchLoading = SearchReducer.isSearchLoading,\n      autocompleteList = SearchReducer.autocompleteList,\n      query = SearchReducer.query;\n  return {\n    isSearchOpen: isSearchOpen,\n    isSearchLoading: isSearchLoading,\n    autocompleteList: autocompleteList,\n    query: query\n  };\n};\n\nvar mapDispatchToProps = {\n  setSearchModalState: setSearchModalState,\n  searchQuery: searchQuery,\n  push: push\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchModal);","map":null,"metadata":{},"sourceType":"module"}