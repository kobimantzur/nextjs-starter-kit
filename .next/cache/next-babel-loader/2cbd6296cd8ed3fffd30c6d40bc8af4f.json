{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { getCountries } from '../../reducers/Search/actions';\nimport { CountryPicker } from './Components';\nimport { FancyTitle, Content, Page, AppSpinner } from '../../components';\n\nvar SearchPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchPage, _Component);\n\n  function SearchPage() {\n    _classCallCheck(this, SearchPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SearchPage).apply(this, arguments));\n  }\n\n  _createClass(SearchPage, [{\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.props.isLoading;\n      return __jsx(Page, _extends({\n        className: \"search-page\"\n      }, this.props, {\n        isLoading: true\n      }), isLoading && __jsx(AppSpinner, null), __jsx(Content, null, !isLoading && __jsx(React.Fragment, null, __jsx(FancyTitle, {\n        highlightedTitle: \"\\u05D1\\u05E8\\u05D5\\u05DB\\u05D9\\u05DD \\u05D4\\u05D1\\u05D0\\u05D9\\u05DD \\u05DC\\u05DE\\u05D0\\u05E4\\u05D5\"\n      }), __jsx(CountryPicker, this.props))));\n    }\n  }]);\n\n  return SearchPage;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var SearchReducer = _ref.SearchReducer;\n  var isLoading = SearchReducer.isLoading,\n      countriesList = SearchReducer.countriesList;\n  return {\n    isLoading: isLoading,\n    countriesList: countriesList\n  };\n};\n\nvar mapDispatchToProps = {\n  getCountries: getCountries,\n  push: push\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);","map":null,"metadata":{},"sourceType":"module"}