{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport { push } from 'connected-react-router';\nimport { connect } from 'react-redux';\nimport { setSearchModalState, searchQuery } from '../../../reducers/Search/actions';\nimport SearchBar from './Components/SearchBar';\nimport './index.scss';\nimport AutocompleteOptions from './Components/AutocompleteOptions'; // Modal.setAppElement('#react-root');\n\nModal.setAppElement('#__next');\n\nvar SearchModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchModal, _Component);\n\n  function SearchModal() {\n    _classCallCheck(this, SearchModal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SearchModal).apply(this, arguments));\n  }\n\n  _createClass(SearchModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var isSearchOpen = this.props.isSearchOpen;\n      return __jsx(Modal, {\n        id: \"searchModal\",\n        isOpen: isSearchOpen,\n        onRequestClose: function onRequestClose() {\n          return _this.props.setSearchModalState(false);\n        },\n        contentLabel: \"Example Modal\"\n      }, __jsx(SearchBar, this.props), __jsx(AutocompleteOptions, this.props));\n    }\n  }]);\n\n  return SearchModal;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var SearchReducer = _ref.SearchReducer;\n  var isSearchOpen = SearchReducer.isSearchOpen,\n      isSearchLoading = SearchReducer.isSearchLoading,\n      autocompleteList = SearchReducer.autocompleteList,\n      query = SearchReducer.query;\n  return {\n    isSearchOpen: isSearchOpen,\n    isSearchLoading: isSearchLoading,\n    autocompleteList: autocompleteList,\n    query: query\n  };\n};\n\nvar mapDispatchToProps = {\n  setSearchModalState: setSearchModalState,\n  searchQuery: searchQuery,\n  push: push\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchModal);","map":{"version":3,"sources":["/Users/kobimantzur/mapo/web/src/containers/shared/SearchModal/index.js"],"names":["React","Component","Modal","push","connect","setSearchModalState","searchQuery","SearchBar","AutocompleteOptions","setAppElement","SearchModal","isSearchOpen","props","mapStateToProps","SearchReducer","isSearchLoading","autocompleteList","query","mapDispatchToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,kCAAjD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,cAAP;AACA,OAAOC,mBAAP,MAAgC,kCAAhC,C,CAEA;;AACAN,KAAK,CAACO,aAAN,CAAoB,SAApB;;IAEMC,W;;;;;;;;;;;;;6BACK;AAAA;;AAAA,UACCC,YADD,GACkB,KAAKC,KADvB,CACCD,YADD;AAGP,aACE,MAAC,KAAD;AACE,QAAA,EAAE,EAAC,aADL;AAEE,QAAA,MAAM,EAAEA,YAFV;AAGE,QAAA,cAAc,EAAE;AAAA,iBAAM,KAAI,CAACC,KAAL,CAAWP,mBAAX,CAA+B,KAA/B,CAAN;AAAA,SAHlB;AAIE,QAAA,YAAY,EAAC;AAJf,SAME,MAAC,SAAD,EAAe,KAAKO,KAApB,CANF,EAOE,MAAC,mBAAD,EAAyB,KAAKA,KAA9B,CAPF,CADF;AAWD;;;;EAfuBX,S;;AAiB1B,IAAMY,eAAe,GAAG,SAAlBA,eAAkB,OAAuB;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AAAA,MAE3CH,YAF2C,GAGzCG,aAHyC,CAE3CH,YAF2C;AAAA,MAE7BI,eAF6B,GAGzCD,aAHyC,CAE7BC,eAF6B;AAAA,MAEZC,gBAFY,GAGzCF,aAHyC,CAEZE,gBAFY;AAAA,MAEMC,KAFN,GAGzCH,aAHyC,CAEMG,KAFN;AAI7C,SAAO;AACLN,IAAAA,YAAY,EAAZA,YADK;AAELI,IAAAA,eAAe,EAAfA,eAFK;AAGLC,IAAAA,gBAAgB,EAAhBA,gBAHK;AAILC,IAAAA,KAAK,EAALA;AAJK,GAAP;AAMD,CAVD;;AAWA,IAAMC,kBAAkB,GAAG;AACzBb,EAAAA,mBAAmB,EAAnBA,mBADyB;AAEzBC,EAAAA,WAAW,EAAXA,WAFyB;AAGzBH,EAAAA,IAAI,EAAJA;AAHyB,CAA3B;AAKA,eAAeC,OAAO,CAACS,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CR,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport { push } from 'connected-react-router';\nimport { connect } from 'react-redux';\nimport { setSearchModalState, searchQuery } from '../../../reducers/Search/actions';\nimport SearchBar from './Components/SearchBar';\nimport './index.scss';\nimport AutocompleteOptions from './Components/AutocompleteOptions';\n\n// Modal.setAppElement('#react-root');\nModal.setAppElement('#__next');\n\nclass SearchModal extends Component {\n  render() {\n    const { isSearchOpen } = this.props;\n\n    return (\n      <Modal\n        id=\"searchModal\"\n        isOpen={isSearchOpen}\n        onRequestClose={() => this.props.setSearchModalState(false)}\n        contentLabel=\"Example Modal\"\n      >\n        <SearchBar {...this.props} />\n        <AutocompleteOptions {...this.props} />\n      </Modal>\n    );\n  }\n}\nconst mapStateToProps = ({ SearchReducer }) => {\n  const {\n    isSearchOpen, isSearchLoading, autocompleteList, query,\n  } = SearchReducer;\n  return {\n    isSearchOpen,\n    isSearchLoading,\n    autocompleteList,\n    query,\n  };\n};\nconst mapDispatchToProps = {\n  setSearchModalState,\n  searchQuery,\n  push,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchModal);\n"]},"metadata":{},"sourceType":"module"}