{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { getCountries } from '../../reducers/Search/actions';\nimport { CountryPicker } from './Components';\nimport { FancyTitle, Content, Page, AppSpinner } from '../../components';\n\nclass SearchPage extends Component {\n  // componentDidMount() {\n  //   this.props.getCountries();\n  // }\n  render() {\n    const {\n      isLoading\n    } = this.props; // const isLoading = true;\n\n    return __jsx(Page, _extends({\n      className: \"search-page\"\n    }, this.props, {\n      isLoading: true\n    }), isLoading && __jsx(AppSpinner, null), __jsx(Content, null, !isLoading && __jsx(React.Fragment, null, __jsx(FancyTitle, {\n      highlightedTitle: \"\\u05D1\\u05E8\\u05D5\\u05DB\\u05D9\\u05DD \\u05D4\\u05D1\\u05D0\\u05D9\\u05DD \\u05DC\\u05DE\\u05D0\\u05E4\\u05D5\"\n    }), __jsx(CountryPicker, this.props))));\n  }\n\n}\n\nconst mapStateToProps = ({\n  SearchReducer\n}) => {\n  const {\n    isLoading,\n    countriesList\n  } = SearchReducer;\n  return {\n    isLoading,\n    countriesList\n  };\n};\n\nconst mapDispatchToProps = {\n  getCountries,\n  push\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);","map":null,"metadata":{},"sourceType":"module"}