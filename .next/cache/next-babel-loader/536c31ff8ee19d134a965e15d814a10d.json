{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { Page, AppSpinner } from '../../components';\nimport { getPlaceDetails, navigateSearchBySubCategory } from '../../reducers/Search/actions';\nimport { CountryHeader, CitiesPicker, InfoCards } from './Components';\nimport SubCategoryPicker from '../../components/SubCategoryPicker';\nimport Content from '../../components/Content';\nimport FancyTitle from '../../components/FancyTitle';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport { buildPlaceUrl } from '../../services/urlBuilderService';\n\nvar PlacePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlacePage, _Component);\n\n  function PlacePage() {\n    _classCallCheck(this, PlacePage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlacePage).apply(this, arguments));\n  }\n\n  _createClass(PlacePage, [{\n    key: \"componentDidUpdate\",\n    // componentDidMount() {\n    //   const { match } = this.props;\n    //   const { placeId } = match.params;\n    //   if (!placeId) return this.props.push('/');\n    //   this.props.getPlaceDetails(placeId);\n    // }\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.location !== prevProps.location) {\n        var match = this.props.match;\n        var placeId = match.params.placeId;\n        if (!placeId) return this.props.push('/');\n        this.props.getPlaceDetails(placeId);\n      }\n    }\n  }, {\n    key: \"getBreadcrumbsData\",\n    value: function getBreadcrumbsData() {\n      var selectedPlace = this.props.selectedPlace;\n      var items = [];\n\n      if (selectedPlace && selectedPlace.country) {\n        items.push({\n          title: selectedPlace.country.heName,\n          link: buildPlaceUrl(selectedPlace.country),\n          placeObject: selectedPlace.country\n        });\n      }\n\n      items.push({\n        title: selectedPlace.heName,\n        isHighlighted: true\n      });\n      return items;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          selectedPlace = _this$props.selectedPlace,\n          isLoading = _this$props.isLoading;\n      var highlightedTitle = '';\n\n      if (selectedPlace) {\n        highlightedTitle = \"\".concat(selectedPlace.heName); // if (selectedPlace.country && typeof selectedPlace.country === 'object') {\n        //   highlightedTitle += `, ${selectedPlace.country.heName}`;\n        // }\n      }\n\n      return __jsx(Page, {\n        className: \"place-page\"\n      }, isLoading && __jsx(AppSpinner, null), !isLoading && __jsx(Content, null, selectedPlace && __jsx(React.Fragment, null, __jsx(FancyTitle, {\n        highlightedTitle: \"\".concat(highlightedTitle, \".\"),\n        regularTitle: \"\\u05DB\\u05DC \\u05DE\\u05D4 \\u05E9\\u05E8\\u05E6\\u05D9\\u05EA\\u05DD \\u05DC\\u05D3\\u05E2\\u05EA \\u05E2\\u05DC\"\n      }), __jsx(Breadcrumbs, {\n        items: this.getBreadcrumbsData()\n      })), __jsx(SubCategoryPicker, this.props), __jsx(InfoCards, this.props), __jsx(CitiesPicker, this.props)));\n    }\n  }]);\n\n  return PlacePage;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var SearchReducer = _ref.SearchReducer;\n  var isLoading = SearchReducer.isLoading,\n      selectedPlace = SearchReducer.selectedPlace,\n      citiesList = SearchReducer.citiesList,\n      subCategoriesList = SearchReducer.subCategoriesList;\n  return {\n    isLoading: isLoading,\n    selectedPlace: selectedPlace,\n    citiesList: citiesList,\n    subCategoriesList: subCategoriesList\n  };\n};\n\nvar mapDispatchToProps = {\n  getPlaceDetails: getPlaceDetails,\n  push: push,\n  navigateSearchBySubCategory: navigateSearchBySubCategory\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlacePage);","map":{"version":3,"sources":["/Users/kobimantzur/mapo/web/src/containers/PlacePage/index.js"],"names":["React","Component","Layout","connect","push","Page","AppSpinner","getPlaceDetails","navigateSearchBySubCategory","CountryHeader","CitiesPicker","InfoCards","SubCategoryPicker","Content","FancyTitle","Breadcrumbs","buildPlaceUrl","PlacePage","prevProps","props","location","match","placeId","params","selectedPlace","items","country","title","heName","link","placeObject","isHighlighted","isLoading","highlightedTitle","getBreadcrumbsData","mapStateToProps","SearchReducer","citiesList","subCategoriesList","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { Page, AppSpinner } from '../../components';\nimport { getPlaceDetails, navigateSearchBySubCategory } from '../../reducers/Search/actions';\nimport { CountryHeader, CitiesPicker, InfoCards } from './Components';\nimport SubCategoryPicker from '../../components/SubCategoryPicker';\nimport Content from '../../components/Content';\nimport FancyTitle from '../../components/FancyTitle';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport { buildPlaceUrl } from '../../services/urlBuilderService';\n\nclass PlacePage extends Component {\n  // componentDidMount() {\n  //   const { match } = this.props;\n  //   const { placeId } = match.params;\n  //   if (!placeId) return this.props.push('/');\n  //   this.props.getPlaceDetails(placeId);\n  // }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      const { match } = this.props;\n      const { placeId } = match.params;\n      if (!placeId) return this.props.push('/');\n      this.props.getPlaceDetails(placeId);\n    }\n  }\n  getBreadcrumbsData() {\n    const { selectedPlace } = this.props;\n    let items = [];\n\n    if (selectedPlace && selectedPlace.country) {\n      items.push({\n        title: selectedPlace.country.heName,\n        link: buildPlaceUrl(selectedPlace.country),\n        placeObject: selectedPlace.country\n      });\n    }\n\n    items.push({\n      title: selectedPlace.heName,\n      isHighlighted: true\n    });\n\n    return items;\n  }\n\n  render() {\n    const { selectedPlace, isLoading } = this.props;\n    let highlightedTitle = '';\n    if (selectedPlace) {\n      highlightedTitle = `${selectedPlace.heName}`;\n      // if (selectedPlace.country && typeof selectedPlace.country === 'object') {\n      //   highlightedTitle += `, ${selectedPlace.country.heName}`;\n      // }\n    }\n\n    return (\n      <Page className=\"place-page\">\n        {isLoading && <AppSpinner />}\n        {!isLoading && (\n          <Content>\n            {selectedPlace && (\n              <React.Fragment>\n                <FancyTitle\n                  highlightedTitle={`${highlightedTitle}.`}\n                  regularTitle=\"כל מה שרציתם לדעת על\"\n                />\n                <Breadcrumbs items={this.getBreadcrumbsData()} />\n              </React.Fragment>\n            )}\n            <SubCategoryPicker {...this.props} />\n            <InfoCards {...this.props} />\n            <CitiesPicker {...this.props} />\n          </Content>\n        )}\n      </Page>\n    );\n  }\n}\nconst mapStateToProps = ({ SearchReducer }) => {\n  const { isLoading, selectedPlace, citiesList, subCategoriesList } = SearchReducer;\n  return {\n    isLoading,\n    selectedPlace,\n    citiesList,\n    subCategoriesList\n  };\n};\nconst mapDispatchToProps = {\n  getPlaceDetails,\n  push,\n  navigateSearchBySubCategory\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlacePage);\n"]},"metadata":{},"sourceType":"module"}