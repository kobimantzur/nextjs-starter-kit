{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { Page, AppSpinner } from '../../components';\nimport { getPlaceDetails, navigateSearchBySubCategory } from '../../reducers/Search/actions';\nimport { CountryHeader, CitiesPicker, InfoCards } from './Components';\nimport SubCategoryPicker from '../../components/SubCategoryPicker';\nimport Content from '../../components/Content';\nimport FancyTitle from '../../components/FancyTitle';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport { buildPlaceUrl } from '../../services/urlBuilderService';\n\nclass PlacePage extends Component {\n  // componentDidMount() {\n  //   const { match } = this.props;\n  //   const { placeId } = match.params;\n  //   if (!placeId) return this.props.push('/');\n  //   this.props.getPlaceDetails(placeId);\n  // }\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      const {\n        match\n      } = this.props;\n      const {\n        placeId\n      } = match.params;\n      if (!placeId) return this.props.push('/');\n      this.props.getPlaceDetails(placeId);\n    }\n  }\n\n  getBreadcrumbsData() {\n    const {\n      selectedPlace\n    } = this.props;\n    let items = [];\n\n    if (selectedPlace && selectedPlace.country) {\n      items.push({\n        title: selectedPlace.country.heName,\n        link: buildPlaceUrl(selectedPlace.country),\n        placeObject: selectedPlace.country\n      });\n    }\n\n    items.push({\n      title: selectedPlace.heName,\n      isHighlighted: true\n    });\n    return items;\n  }\n\n  render() {\n    const {\n      selectedPlace,\n      isLoading\n    } = this.props;\n    let highlightedTitle = '';\n\n    if (selectedPlace) {\n      highlightedTitle = `${selectedPlace.heName}`; // if (selectedPlace.country && typeof selectedPlace.country === 'object') {\n      //   highlightedTitle += `, ${selectedPlace.country.heName}`;\n      // }\n    }\n\n    return __jsx(Page, {\n      className: \"place-page\"\n    }, isLoading && __jsx(AppSpinner, null), !isLoading && __jsx(Content, null, selectedPlace && __jsx(React.Fragment, null, __jsx(FancyTitle, {\n      highlightedTitle: `${highlightedTitle}.`,\n      regularTitle: \"\\u05DB\\u05DC \\u05DE\\u05D4 \\u05E9\\u05E8\\u05E6\\u05D9\\u05EA\\u05DD \\u05DC\\u05D3\\u05E2\\u05EA \\u05E2\\u05DC\"\n    }), __jsx(Breadcrumbs, {\n      items: this.getBreadcrumbsData()\n    })), __jsx(SubCategoryPicker, this.props), __jsx(InfoCards, this.props), __jsx(CitiesPicker, this.props)));\n  }\n\n}\n\nconst mapStateToProps = ({\n  SearchReducer\n}) => {\n  const {\n    isLoading,\n    selectedPlace,\n    citiesList,\n    subCategoriesList\n  } = SearchReducer;\n  return {\n    isLoading,\n    selectedPlace,\n    citiesList,\n    subCategoriesList\n  };\n};\n\nconst mapDispatchToProps = {\n  getPlaceDetails,\n  push,\n  navigateSearchBySubCategory\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlacePage);","map":{"version":3,"sources":["/Users/kobimantzur/mapo/web/src/containers/PlacePage/index.js"],"names":["React","Component","Layout","connect","push","Page","AppSpinner","getPlaceDetails","navigateSearchBySubCategory","CountryHeader","CitiesPicker","InfoCards","SubCategoryPicker","Content","FancyTitle","Breadcrumbs","buildPlaceUrl","PlacePage","componentDidUpdate","prevProps","props","location","match","placeId","params","getBreadcrumbsData","selectedPlace","items","country","title","heName","link","placeObject","isHighlighted","render","isLoading","highlightedTitle","mapStateToProps","SearchReducer","citiesList","subCategoriesList","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { Page, AppSpinner } from '../../components';\nimport { getPlaceDetails, navigateSearchBySubCategory } from '../../reducers/Search/actions';\nimport { CountryHeader, CitiesPicker, InfoCards } from './Components';\nimport SubCategoryPicker from '../../components/SubCategoryPicker';\nimport Content from '../../components/Content';\nimport FancyTitle from '../../components/FancyTitle';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport { buildPlaceUrl } from '../../services/urlBuilderService';\n\nclass PlacePage extends Component {\n  // componentDidMount() {\n  //   const { match } = this.props;\n  //   const { placeId } = match.params;\n  //   if (!placeId) return this.props.push('/');\n  //   this.props.getPlaceDetails(placeId);\n  // }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      const { match } = this.props;\n      const { placeId } = match.params;\n      if (!placeId) return this.props.push('/');\n      this.props.getPlaceDetails(placeId);\n    }\n  }\n  getBreadcrumbsData() {\n    const { selectedPlace } = this.props;\n    let items = [];\n\n    if (selectedPlace && selectedPlace.country) {\n      items.push({\n        title: selectedPlace.country.heName,\n        link: buildPlaceUrl(selectedPlace.country),\n        placeObject: selectedPlace.country\n      });\n    }\n\n    items.push({\n      title: selectedPlace.heName,\n      isHighlighted: true\n    });\n\n    return items;\n  }\n\n  render() {\n    const { selectedPlace, isLoading } = this.props;\n    let highlightedTitle = '';\n    if (selectedPlace) {\n      highlightedTitle = `${selectedPlace.heName}`;\n      // if (selectedPlace.country && typeof selectedPlace.country === 'object') {\n      //   highlightedTitle += `, ${selectedPlace.country.heName}`;\n      // }\n    }\n\n    return (\n      <Page className=\"place-page\">\n        {isLoading && <AppSpinner />}\n        {!isLoading && (\n          <Content>\n            {selectedPlace && (\n              <React.Fragment>\n                <FancyTitle\n                  highlightedTitle={`${highlightedTitle}.`}\n                  regularTitle=\"כל מה שרציתם לדעת על\"\n                />\n                <Breadcrumbs items={this.getBreadcrumbsData()} />\n              </React.Fragment>\n            )}\n            <SubCategoryPicker {...this.props} />\n            <InfoCards {...this.props} />\n            <CitiesPicker {...this.props} />\n          </Content>\n        )}\n      </Page>\n    );\n  }\n}\nconst mapStateToProps = ({ SearchReducer }) => {\n  const { isLoading, selectedPlace, citiesList, subCategoriesList } = SearchReducer;\n  return {\n    isLoading,\n    selectedPlace,\n    citiesList,\n    subCategoriesList\n  };\n};\nconst mapDispatchToProps = {\n  getPlaceDetails,\n  push,\n  navigateSearchBySubCategory\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlacePage);\n"]},"metadata":{},"sourceType":"module"}