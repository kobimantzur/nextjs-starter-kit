{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport * as types from './constants';\nimport { reportEvent } from '../../services/analyticsService';\nexport function cleanBusinessPage() {\n  return {\n    type: types.SET_BUSINESS,\n    payload: {\n      isLoading: false,\n      business: undefined\n    }\n  };\n}\nexport var setEmptyState = function setEmptyState() {\n  return {\n    type: types.SET_EMPTY_STATE\n  };\n};\nexport var fetchBusinessByFriendlyUrl = function fetchBusinessByFriendlyUrl(friendlyUrl) {\n  return axios.get(types.GET_BY_FRIENDLY_URL, {\n    params: {\n      friendlyUrl: friendlyUrl\n    }\n  });\n};\nexport var getBusinessByFriendlyUrl = function getBusinessByFriendlyUrl(friendlyUrl) {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetchBusinessByFriendlyUrl(friendlyUrl));\n\n          case 2:\n            response = _context.sent;\n\n            if (!response || !response.data) {} // TODO: notify error\n            // document.title = `Avartii | ${response.data.englishName}`;\n\n\n            console.log('setting result');\n            dispatch({\n              type: types.SET_BUSINESS,\n              payload: {\n                business: response.data\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};\nexport var submitBusinessReview = function submitBusinessReview(data) {\n  return function (dispatch) {\n    axios.post(types.SUBMIT_BUSINESS_REVIEW_URL, data).then(function (response) {\n      reportEvent({\n        category: 'ReviewModal',\n        action: 'Complete'\n      });\n      dispatch({\n        type: types.SET_REVIEWS,\n        payload: {\n          reviewsList: response.data.reviewsList,\n          userReview: response.data.userReview\n        }\n      }); // TODO: show success message\n      // TODO: append the comment on top of all comments\n    })[\"catch\"](function (e) {\n      console.log(e);\n    });\n  };\n};\nexport function setReviewModalState(isReviewModalOpen) {\n  reportEvent({\n    category: 'ReviewModal',\n    action: isReviewModalOpen ? 'ModalOpen' : 'ModalClose'\n  });\n  return {\n    type: types.SET_REVIEW_MODAL_STATE,\n    payload: {\n      isReviewModalOpen: isReviewModalOpen\n    }\n  };\n}\nexport function setReviewLoadingState(isReviewLoading) {\n  return {\n    type: types.SET_REVIEW_LOADING_STATE,\n    payload: {\n      isReviewLoading: isReviewLoading\n    }\n  };\n}","map":{"version":3,"sources":["/Users/kobimantzur/mapo/hello-next/src/reducers/BusinessPage/actions.js"],"names":["axios","types","reportEvent","cleanBusinessPage","type","SET_BUSINESS","payload","isLoading","business","undefined","setEmptyState","SET_EMPTY_STATE","fetchBusinessByFriendlyUrl","friendlyUrl","get","GET_BY_FRIENDLY_URL","params","getBusinessByFriendlyUrl","dispatch","response","data","console","log","submitBusinessReview","post","SUBMIT_BUSINESS_REVIEW_URL","then","category","action","SET_REVIEWS","reviewsList","userReview","e","setReviewModalState","isReviewModalOpen","SET_REVIEW_MODAL_STATE","setReviewLoadingState","isReviewLoading","SET_REVIEW_LOADING_STATE"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as types from './constants';\nimport { reportEvent } from '../../services/analyticsService';\n\nexport function cleanBusinessPage() {\n  return {\n    type: types.SET_BUSINESS,\n    payload: { isLoading: false, business: undefined }\n  };\n}\n\nexport const setEmptyState = () => ({\n  type: types.SET_EMPTY_STATE\n});\n\nexport const fetchBusinessByFriendlyUrl = friendlyUrl => {\n  return axios.get(types.GET_BY_FRIENDLY_URL, {\n    params: {\n      friendlyUrl\n    }\n  });\n};\n\nexport const getBusinessByFriendlyUrl = friendlyUrl => async dispatch => {\n  // if (window.business) {\n  //   return dispatch({\n  //     type: types.SET_BUSINESS,\n  //     payload: { business: window.business },\n  //   });\n  // }\n\n  const response = await fetchBusinessByFriendlyUrl(friendlyUrl);\n  if (!response || !response.data) {\n    // TODO: notify error\n  }\n  // document.title = `Avartii | ${response.data.englishName}`;\n  console.log('setting result');\n  dispatch({\n    type: types.SET_BUSINESS,\n    payload: { business: response.data }\n  });\n};\n\nexport const submitBusinessReview = data => dispatch => {\n  axios\n    .post(types.SUBMIT_BUSINESS_REVIEW_URL, data)\n    .then(response => {\n      reportEvent({\n        category: 'ReviewModal',\n        action: 'Complete'\n      });\n      dispatch({\n        type: types.SET_REVIEWS,\n        payload: { reviewsList: response.data.reviewsList, userReview: response.data.userReview }\n      });\n      // TODO: show success message\n      // TODO: append the comment on top of all comments\n    })\n    .catch(e => {\n      console.log(e);\n    });\n};\n\nexport function setReviewModalState(isReviewModalOpen) {\n  reportEvent({\n    category: 'ReviewModal',\n    action: isReviewModalOpen ? 'ModalOpen' : 'ModalClose'\n  });\n  return {\n    type: types.SET_REVIEW_MODAL_STATE,\n    payload: { isReviewModalOpen }\n  };\n}\n\nexport function setReviewLoadingState(isReviewLoading) {\n  return {\n    type: types.SET_REVIEW_LOADING_STATE,\n    payload: { isReviewLoading }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}