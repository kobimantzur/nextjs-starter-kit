{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport './index.scss';\nimport { buildPlaceUrl } from '../../../../../services/urlBuilderService';\nexport default class AutocompleteOptions extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onPlaceClick\", place => {\n      const targetUrl = buildPlaceUrl(place);\n      this.props.setSearchModalState(false);\n      this.props.push(targetUrl);\n    });\n  }\n\n  getBoldedText(pattern, text) {\n    if (!text) return '';\n    if (!pattern) return text;\n    const updatedText = text.replace(pattern, `<strong>${pattern}</strong>`);\n    return updatedText;\n  }\n\n  renderPlacements(placementsList) {\n    const {\n      query\n    } = this.props;\n    if (!placementsList) return null;\n    return __jsx(\"div\", {\n      className: \"placements-list\"\n    }, placementsList.map(placement => {\n      const placementText = `${placement.heName} ${placement.country ? `, ${placement.country.heName}` : ''}`;\n      return __jsx(\"div\", {\n        className: \"placement\",\n        key: placement._id,\n        onClick: () => this.onPlaceClick(placement)\n      }, __jsx(\"i\", {\n        className: \"fas fa-map-marker-alt\"\n      }), __jsx(\"span\", {\n        className: \"name\",\n        dangerouslySetInnerHTML: {\n          __html: this.getBoldedText(query, placementText)\n        }\n      }));\n    }));\n  }\n\n  render() {\n    const {\n      autocompleteList\n    } = this.props;\n    if (!autocompleteList) return null;\n    const {\n      placementsList\n    } = autocompleteList;\n    return __jsx(\"div\", {\n      className: \"autocomplete-options\"\n    }, this.renderPlacements(placementsList));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}