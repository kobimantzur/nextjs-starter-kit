{"ast":null,"code":"var _jsxFileName = \"/Users/kobi.mantzur/m/n/src/containers/BusinessPage/Components/Comments/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Card, Button } from 'antd';\nimport './index.scss';\nimport classnames from 'classnames';\nimport UserAvatar from '../../../../img/user-avatar.png';\nimport { getFriendlyTime } from '../../../../services/commonService';\nconst propTypes = {\n  business: PropTypes.object\n};\nconst defaultProps = {\n  business: {\n    reviewsList: []\n  }\n};\nexport default class Comments extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"renderCommentHeader\", comment => {\n      const {\n        userId,\n        createdAt\n      } = comment;\n      const userFullName = `${userId.firstName} ${userId.lastName}`;\n      return __jsx(Row, {\n        className: \"comment-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, getFriendlyTime(createdAt))), __jsx(\"div\", {\n        className: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        src: userId.profilePictureUrl || UserAvatar,\n        alt: userFullName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), __jsx(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, userFullName)));\n    });\n\n    _defineProperty(this, \"renderCommentBody\", review => {\n      const {\n        comment\n      } = review;\n      return __jsx(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        className: \"comment-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, comment));\n    });\n\n    this.state = {};\n  }\n\n  renderAddButton() {\n    return __jsx(Button, {\n      className: \"add-comment\",\n      onClick: this.props.onAddClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"\\u05D4\\u05D5\\u05E1\\u05E3 \\u05D4\\u05DE\\u05DC\\u05E6\\u05D4\");\n  }\n\n  render() {\n    const {\n      business\n    } = this.props;\n    if (!business) return null;\n    const {\n      reviewsList,\n      userReview\n    } = business;\n    let mergedReviewsList = reviewsList;\n    let isReviewed = false;\n\n    if (userReview) {\n      isReviewed = true;\n      mergedReviewsList = [...[userReview], ...reviewsList.filter(x => x._id !== userReview._id)];\n    }\n\n    return __jsx(\"div\", {\n      className: \"comments-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classnames('comments-header', {\n        'has-review': isReviewed\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, __jsx(\"h4\", {\n      className: \"rec-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, `${business.numOfReviews} תגובות`)), mergedReviewsList.map(comment => __jsx(Card, {\n      key: comment._id,\n      className: classnames('comment', {\n        user: comment._id === (userReview ? userReview._id : '')\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.renderCommentHeader(comment), this.renderCommentBody(comment))));\n  }\n\n}\nComments.propTypes = propTypes;\nComments.defaultProps = defaultProps;","map":{"version":3,"sources":["/Users/kobi.mantzur/m/n/src/containers/BusinessPage/Components/Comments/index.js"],"names":["React","PropTypes","Row","Col","Card","Button","classnames","UserAvatar","getFriendlyTime","propTypes","business","object","defaultProps","reviewsList","Comments","Component","constructor","props","comment","userId","createdAt","userFullName","firstName","lastName","profilePictureUrl","review","state","renderAddButton","onAddClick","render","userReview","mergedReviewsList","isReviewed","filter","x","_id","numOfReviews","map","user","renderCommentHeader","renderCommentBody"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Row, Col, Card, Button,\n} from 'antd';\nimport './index.scss';\nimport classnames from 'classnames';\nimport UserAvatar from '../../../../img/user-avatar.png';\nimport { getFriendlyTime } from '../../../../services/commonService';\n\nconst propTypes = {\n  business: PropTypes.object,\n};\n\nconst defaultProps = {\n  business: {\n    reviewsList: [],\n  },\n};\n\nexport default class Comments extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  renderCommentHeader = (comment) => {\n    const { userId, createdAt } = comment;\n    const userFullName = `${userId.firstName} ${userId.lastName}`;\n    return (\n      <Row className=\"comment-header\">\n        <div className=\"right\">\n          <span className=\"time\">{getFriendlyTime(createdAt)}</span>\n        </div>\n        <div className=\"left\">\n          <img src={userId.profilePictureUrl || UserAvatar} alt={userFullName} />\n          <h4>{userFullName}</h4>\n        </div>\n      </Row>\n    );\n  };\n\n  renderCommentBody = (review) => {\n    const { comment } = review;\n    return (\n      <Row>\n        <p className=\"comment-text\">{comment}</p>\n      </Row>\n    );\n  };\n\n  renderAddButton() {\n    return (\n      <Button className=\"add-comment\" onClick={this.props.onAddClick}>\n        הוסף המלצה\n      </Button>\n    );\n  }\n\n  render() {\n    const { business } = this.props;\n    if (!business) return null;\n    const { reviewsList, userReview } = business;\n    let mergedReviewsList = reviewsList;\n    let isReviewed = false;\n    if (userReview) {\n      isReviewed = true;\n      mergedReviewsList = [...[userReview], ...reviewsList.filter(x => x._id !== userReview._id)];\n    }\n    return (\n      <div className=\"comments-container\">\n        <div className={classnames('comments-header', { 'has-review': isReviewed })}>\n          {/* {!userReview && (this.renderAddButton())} */}\n          <h4 className=\"rec-text\">{`${business.numOfReviews} תגובות`}</h4>\n        </div>\n        {mergedReviewsList.map(comment => (\n          <Card\n            key={comment._id}\n            className={classnames('comment', {\n              user: comment._id === (userReview ? userReview._id : ''),\n            })}\n          >\n            {this.renderCommentHeader(comment)}\n            {this.renderCommentBody(comment)}\n          </Card>\n        ))}\n      </div>\n    );\n  }\n}\n\nComments.propTypes = propTypes;\nComments.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}