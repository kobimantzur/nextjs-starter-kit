{"ast":null,"code":"var __jsx = React.createElement;\n// pages/_app.js\nimport React from 'react';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from 'next/app';\nimport withRedux from 'next-redux-wrapper';\nimport createRootReducer from '../src/reducers';\nimport thunk from 'redux-thunk';\nconst composeEnhancer = compose;\nimport Layout from '../src/components/Layout';\nimport { ConnectedRouter } from 'connected-react-router'; // import { createBrowserHistory } from 'history';\n// const history = createBrowserHistory();\n\n/**\n * @param {object} initialState\n * @param {boolean} options.isServer indicates whether it is a server side or client side\n * @param {Request} options.req NodeJS Request object (not set when client applies initialState from server)\n * @param {Request} options.res NodeJS Request object (not set when client applies initialState from server)\n * @param {boolean} options.debug User-defined debug mode param\n * @param {string} options.storeKey This key will be used to preserve store in global namespace for safe HMR\n */\n\nconst makeStore = (initialState, options) => {\n  return createStore(createRootReducer(), initialState, composeEnhancer(applyMiddleware(thunk)));\n};\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    // we can dispatch from here too\n    ctx.store.dispatch({\n      type: 'FOO',\n      payload: 'foo'\n    });\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(Layout, null, __jsx(Component, pageProps)));\n  }\n\n}\n\nexport default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["/Users/kobimantzur/mapo/web/pages/_app.js"],"names":["React","createStore","applyMiddleware","compose","Provider","App","withRedux","createRootReducer","thunk","composeEnhancer","Layout","ConnectedRouter","makeStore","initialState","options","MyApp","getInitialProps","Component","ctx","store","dispatch","type","payload","pageProps","render","props"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,iBAAP,MAA8B,iBAA9B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,eAAe,GAAGN,OAAxB;AACA,OAAOO,MAAP,MAAmB,0BAAnB;AACA,SAASC,eAAT,QAAgC,wBAAhC,C,CACA;AACA;;AAEA;;;;;;;;;AAQA,MAAMC,SAAS,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC3C,SAAOb,WAAW,CAACM,iBAAiB,EAAlB,EAAsBM,YAAtB,EAAoCJ,eAAe,CAACP,eAAe,CAACM,KAAD,CAAhB,CAAnD,CAAlB;AACD,CAFD;;AAIA,MAAMO,KAAN,SAAoBV,GAApB,CAAwB;AACtB,eAAaW,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C;AACAA,IAAAA,GAAG,CAACC,KAAJ,CAAUC,QAAV,CAAmB;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAAnB;AAEA,UAAMC,SAAS,GAAGN,SAAS,CAACD,eAAV,GAA4B,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlC,GAAmE,EAArF;AAEA,WAAO;AAAEK,MAAAA;AAAF,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,SAAF;AAAaM,MAAAA,SAAb;AAAwBJ,MAAAA;AAAxB,QAAkC,KAAKM,KAA7C;AACA,WACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEN;AAAjB,OACE,MAAC,MAAD,QACE,MAAC,SAAD,EAAeI,SAAf,CADF,CADF,CADF;AAOD;;AAnBqB;;AAsBxB,eAAejB,SAAS,CAACM,SAAD,CAAT,CAAqBG,KAArB,CAAf","sourcesContent":["// pages/_app.js\nimport React from 'react';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from 'next/app';\nimport withRedux from 'next-redux-wrapper';\nimport createRootReducer from '../src/reducers';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancer = compose;\nimport Layout from '../src/components/Layout';\nimport { ConnectedRouter } from 'connected-react-router';\n// import { createBrowserHistory } from 'history';\n// const history = createBrowserHistory();\n\n/**\n * @param {object} initialState\n * @param {boolean} options.isServer indicates whether it is a server side or client side\n * @param {Request} options.req NodeJS Request object (not set when client applies initialState from server)\n * @param {Request} options.res NodeJS Request object (not set when client applies initialState from server)\n * @param {boolean} options.debug User-defined debug mode param\n * @param {string} options.storeKey This key will be used to preserve store in global namespace for safe HMR\n */\nconst makeStore = (initialState, options) => {\n  return createStore(createRootReducer(), initialState, composeEnhancer(applyMiddleware(thunk)));\n};\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    // we can dispatch from here too\n    ctx.store.dispatch({ type: 'FOO', payload: 'foo' });\n\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n\n    return { pageProps };\n  }\n\n  render() {\n    const { Component, pageProps, store } = this.props;\n    return (\n      <Provider store={store}>\n        <Layout>\n          <Component {...pageProps} />\n        </Layout>\n      </Provider>\n    );\n  }\n}\n\nexport default withRedux(makeStore)(MyApp);\n"]},"metadata":{},"sourceType":"module"}