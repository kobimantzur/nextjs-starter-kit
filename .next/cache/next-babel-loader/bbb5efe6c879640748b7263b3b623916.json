{"ast":null,"code":"var __jsx = React.createElement;\nimport { Layout as AntLayout, Drawer, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport SearchBar from '../../../../containers/SearchPage/Components/SearchBar';\nimport { setSearchModalState } from '../../../../reducers/Search/actions';\nimport './index.scss';\nimport { isMobile } from '../../../../services/commonService';\nimport Menu from '../Menu';\nconst PLACEHOLDER_TEXT = 'חפשו במאפו';\nconst {\n  Header\n} = AntLayout;\n\nclass AppHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFocused: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', () => {\n      let activeClass = '';\n\n      if (window.scrollY > this.vw(15)) {\n        activeClass = 'scrolled';\n      }\n\n      this.setState({\n        activeClass\n      });\n    });\n  }\n\n  vw(v) {\n    const w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    return v * w / 100;\n  }\n\n  render() {\n    const {\n      isFocused,\n      activeClass\n    } = this.state;\n    const {\n      isLoading,\n      selectedPlace,\n      selectedSubCategory\n    } = this.props;\n    const searchTerm = selectedPlace && selectedSubCategory ? `${selectedSubCategory.title} ב${selectedPlace.heName}` : '';\n    return __jsx(Header, {\n      className: `header ${isFocused ? 'on-focus' : ''} ${activeClass}`\n    }, __jsx(\"div\", {\n      className: \"right\"\n    }, __jsx(Menu, this.props), __jsx(\"div\", {\n      className: \"search-bar-preview\",\n      onClick: () => this.props.setSearchModalState(true)\n    }, !isMobile() && __jsx(\"span\", null, PLACEHOLDER_TEXT), __jsx(\"i\", {\n      className: \"fa fa-search\"\n    }))), __jsx(\"div\", {\n      className: \"left\"\n    }, __jsx(\"a\", {\n      href: \"/\"\n    }, __jsx(\"img\", {\n      alt: \"Mapo\",\n      className: \"logo\",\n      src: '/static/img/logo-white.png'\n    }))));\n  }\n\n}\n\nconst mapStateToProps = ({\n  SearchReducer\n}) => {\n  const {\n    selectedPlace,\n    selectedSubCategory,\n    isLoading\n  } = SearchReducer;\n  return {\n    isLoading,\n    selectedPlace,\n    selectedSubCategory\n  };\n};\n\nconst mapDispatchToProps = {\n  setSearchModalState\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AppHeader);","map":null,"metadata":{},"sourceType":"module"}