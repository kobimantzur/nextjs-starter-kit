{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport * as types from './constants';\nimport { reportEvent } from '../../services/analyticsService';\nexport function cleanBusinessPage() {\n  return {\n    type: types.SET_BUSINESS,\n    payload: {\n      isLoading: false,\n      business: undefined\n    }\n  };\n}\nexport var setEmptyState = function setEmptyState() {\n  return {\n    type: types.SET_EMPTY_STATE\n  };\n};\nexport var fetchBusinessByFriendlyUrl = function fetchBusinessByFriendlyUrl(friendlyUrl) {\n  return axios.get(types.GET_BY_FRIENDLY_URL, {\n    params: {\n      friendlyUrl: friendlyUrl\n    }\n  });\n};\nexport var getBusinessByFriendlyUrl = function getBusinessByFriendlyUrl(friendlyUrl) {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetchBusinessByFriendlyUrl(friendlyUrl));\n\n          case 2:\n            response = _context.sent;\n\n            if (!response || !response.data) {// TODO: notify error\n              // TODO: redirect\n            }\n\n            dispatch({\n              type: types.SET_BUSINESS,\n              payload: {\n                business: response.data\n              }\n            });\n            return _context.abrupt(\"return\", {\n              business: response.data\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};\nexport var submitBusinessReview = function submitBusinessReview(data) {\n  return function (dispatch) {\n    axios.post(types.SUBMIT_BUSINESS_REVIEW_URL, data).then(function (response) {\n      reportEvent({\n        category: 'ReviewModal',\n        action: 'Complete'\n      });\n      dispatch({\n        type: types.SET_REVIEWS,\n        payload: {\n          reviewsList: response.data.reviewsList,\n          userReview: response.data.userReview\n        }\n      }); // TODO: show success message\n      // TODO: append the comment on top of all comments\n    })[\"catch\"](function (e) {\n      console.log(e);\n    });\n  };\n};\nexport function setReviewModalState(isReviewModalOpen) {\n  reportEvent({\n    category: 'ReviewModal',\n    action: isReviewModalOpen ? 'ModalOpen' : 'ModalClose'\n  });\n  return {\n    type: types.SET_REVIEW_MODAL_STATE,\n    payload: {\n      isReviewModalOpen: isReviewModalOpen\n    }\n  };\n}\nexport function setReviewLoadingState(isReviewLoading) {\n  return {\n    type: types.SET_REVIEW_LOADING_STATE,\n    payload: {\n      isReviewLoading: isReviewLoading\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}