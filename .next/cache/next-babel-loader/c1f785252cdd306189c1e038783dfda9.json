{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { Page, AppSpinner } from '../../components';\nimport { getPlaceDetails, navigateSearchBySubCategory } from '../../reducers/Search/actions';\nimport { CountryHeader, CitiesPicker, InfoCards } from './Components';\nimport SubCategoryPicker from '../../components/SubCategoryPicker';\nimport Content from '../../components/Content';\nimport FancyTitle from '../../components/FancyTitle';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport { buildPlaceUrl } from '../../services/urlBuilderService';\n\nclass PlacePage extends Component {\n  // componentDidMount() {\n  //   const { match } = this.props;\n  //   const { placeId } = match.params;\n  //   if (!placeId) return this.props.push('/');\n  //   this.props.getPlaceDetails(placeId);\n  // }\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      const {\n        match\n      } = this.props;\n      const {\n        placeId\n      } = match.params;\n      if (!placeId) return this.props.push('/');\n      this.props.getPlaceDetails(placeId);\n    }\n  }\n\n  getBreadcrumbsData() {\n    const {\n      selectedPlace\n    } = this.props;\n    let items = [];\n\n    if (selectedPlace && selectedPlace.country) {\n      items.push({\n        title: selectedPlace.country.heName,\n        link: buildPlaceUrl(selectedPlace.country),\n        placeObject: selectedPlace.country\n      });\n    }\n\n    items.push({\n      title: selectedPlace.heName,\n      isHighlighted: true\n    });\n    return items;\n  }\n\n  render() {\n    const {\n      selectedPlace,\n      isLoading\n    } = this.props;\n    let highlightedTitle = '';\n\n    if (selectedPlace) {\n      highlightedTitle = `${selectedPlace.heName}`; // if (selectedPlace.country && typeof selectedPlace.country === 'object') {\n      //   highlightedTitle += `, ${selectedPlace.country.heName}`;\n      // }\n    }\n\n    return __jsx(Page, {\n      className: \"place-page\"\n    }, isLoading && __jsx(AppSpinner, null), !isLoading && __jsx(Content, null, selectedPlace && __jsx(React.Fragment, null, __jsx(FancyTitle, {\n      highlightedTitle: `${highlightedTitle}.`,\n      regularTitle: \"\\u05DB\\u05DC \\u05DE\\u05D4 \\u05E9\\u05E8\\u05E6\\u05D9\\u05EA\\u05DD \\u05DC\\u05D3\\u05E2\\u05EA \\u05E2\\u05DC\"\n    }), __jsx(Breadcrumbs, {\n      items: this.getBreadcrumbsData()\n    })), __jsx(SubCategoryPicker, this.props), __jsx(InfoCards, this.props), __jsx(CitiesPicker, this.props)));\n  }\n\n}\n\nconst mapStateToProps = ({\n  SearchReducer\n}) => {\n  const {\n    isLoading,\n    selectedPlace,\n    citiesList,\n    subCategoriesList\n  } = SearchReducer;\n  return {\n    isLoading,\n    selectedPlace,\n    citiesList,\n    subCategoriesList\n  };\n};\n\nconst mapDispatchToProps = {\n  getPlaceDetails,\n  push,\n  navigateSearchBySubCategory\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlacePage);","map":null,"metadata":{},"sourceType":"module"}