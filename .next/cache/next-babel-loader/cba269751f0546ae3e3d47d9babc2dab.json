{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from './types';\nconst INITIAL_STATE = {\n  isLoading: false,\n  isSearchOpen: false,\n  isSearchLoading: false,\n  selectedPlace: undefined,\n  subCategoriesList: []\n};\nexport default ((state = INITIAL_STATE, action = {}) => {\n  const payload = action ? action.payload : {};\n\n  switch (action.type) {\n    case types.SET_COUNTRIES:\n    case types.SET_PLACE_DETAILS:\n    case types.SET_MODAL_STATE:\n    case types.SEARCH_QUERY:\n    case types.SEARCH_SUB_CATEGORY:\n      return _objectSpread({}, state, {}, payload);\n\n    default:\n      return state;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}