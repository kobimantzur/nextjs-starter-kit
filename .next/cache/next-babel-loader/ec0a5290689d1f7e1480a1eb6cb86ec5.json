{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/kobi.mantzur/m/n/src/containers/BusinessPage/Components/Comments/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Card, Button } from 'antd';\nimport './index.scss';\nimport classnames from 'classnames';\nimport UserAvatar from '../../../../img/user-avatar.png';\nimport { getFriendlyTime } from '../../../../services/commonService';\nvar propTypes = {\n  business: PropTypes.object\n};\nvar defaultProps = {\n  business: {\n    reviewsList: []\n  }\n};\n\nvar Comments =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Comments, _React$Component);\n\n  function Comments(props) {\n    var _this;\n\n    _classCallCheck(this, Comments);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Comments).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCommentHeader\", function (comment) {\n      var userId = comment.userId,\n          createdAt = comment.createdAt;\n      var userFullName = \"\".concat(userId.firstName, \" \").concat(userId.lastName);\n      return __jsx(Row, {\n        className: \"comment-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, getFriendlyTime(createdAt))), __jsx(\"div\", {\n        className: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        src: userId.profilePictureUrl || UserAvatar,\n        alt: userFullName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), __jsx(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, userFullName)));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCommentBody\", function (review) {\n      var comment = review.comment;\n      return __jsx(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        className: \"comment-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, comment));\n    });\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Comments, [{\n    key: \"renderAddButton\",\n    value: function renderAddButton() {\n      return __jsx(Button, {\n        className: \"add-comment\",\n        onClick: this.props.onAddClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"\\u05D4\\u05D5\\u05E1\\u05E3 \\u05D4\\u05DE\\u05DC\\u05E6\\u05D4\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var business = this.props.business;\n      if (!business) return null;\n      var reviewsList = business.reviewsList,\n          userReview = business.userReview;\n      var mergedReviewsList = reviewsList;\n      var isReviewed = false;\n\n      if (userReview) {\n        isReviewed = true;\n        mergedReviewsList = [userReview].concat(_toConsumableArray(reviewsList.filter(function (x) {\n          return x._id !== userReview._id;\n        })));\n      }\n\n      return __jsx(\"div\", {\n        className: \"comments-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classnames('comments-header', {\n          'has-review': isReviewed\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, __jsx(\"h4\", {\n        className: \"rec-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"\".concat(business.numOfReviews, \" \\u05EA\\u05D2\\u05D5\\u05D1\\u05D5\\u05EA\"))), mergedReviewsList.map(function (comment) {\n        return __jsx(Card, {\n          key: comment._id,\n          className: classnames('comment', {\n            user: comment._id === (userReview ? userReview._id : '')\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, _this2.renderCommentHeader(comment), _this2.renderCommentBody(comment));\n      }));\n    }\n  }]);\n\n  return Comments;\n}(React.Component);\n\nexport { Comments as default };\nComments.propTypes = propTypes;\nComments.defaultProps = defaultProps;","map":{"version":3,"sources":["/Users/kobi.mantzur/m/n/src/containers/BusinessPage/Components/Comments/index.js"],"names":["React","PropTypes","Row","Col","Card","Button","classnames","UserAvatar","getFriendlyTime","propTypes","business","object","defaultProps","reviewsList","Comments","props","comment","userId","createdAt","userFullName","firstName","lastName","profilePictureUrl","review","state","onAddClick","userReview","mergedReviewsList","isReviewed","filter","x","_id","numOfReviews","map","user","renderCommentHeader","renderCommentBody","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Row, Col, Card, Button,\n} from 'antd';\nimport './index.scss';\nimport classnames from 'classnames';\nimport UserAvatar from '../../../../img/user-avatar.png';\nimport { getFriendlyTime } from '../../../../services/commonService';\n\nconst propTypes = {\n  business: PropTypes.object,\n};\n\nconst defaultProps = {\n  business: {\n    reviewsList: [],\n  },\n};\n\nexport default class Comments extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  renderCommentHeader = (comment) => {\n    const { userId, createdAt } = comment;\n    const userFullName = `${userId.firstName} ${userId.lastName}`;\n    return (\n      <Row className=\"comment-header\">\n        <div className=\"right\">\n          <span className=\"time\">{getFriendlyTime(createdAt)}</span>\n        </div>\n        <div className=\"left\">\n          <img src={userId.profilePictureUrl || UserAvatar} alt={userFullName} />\n          <h4>{userFullName}</h4>\n        </div>\n      </Row>\n    );\n  };\n\n  renderCommentBody = (review) => {\n    const { comment } = review;\n    return (\n      <Row>\n        <p className=\"comment-text\">{comment}</p>\n      </Row>\n    );\n  };\n\n  renderAddButton() {\n    return (\n      <Button className=\"add-comment\" onClick={this.props.onAddClick}>\n        הוסף המלצה\n      </Button>\n    );\n  }\n\n  render() {\n    const { business } = this.props;\n    if (!business) return null;\n    const { reviewsList, userReview } = business;\n    let mergedReviewsList = reviewsList;\n    let isReviewed = false;\n    if (userReview) {\n      isReviewed = true;\n      mergedReviewsList = [...[userReview], ...reviewsList.filter(x => x._id !== userReview._id)];\n    }\n    return (\n      <div className=\"comments-container\">\n        <div className={classnames('comments-header', { 'has-review': isReviewed })}>\n          {/* {!userReview && (this.renderAddButton())} */}\n          <h4 className=\"rec-text\">{`${business.numOfReviews} תגובות`}</h4>\n        </div>\n        {mergedReviewsList.map(comment => (\n          <Card\n            key={comment._id}\n            className={classnames('comment', {\n              user: comment._id === (userReview ? userReview._id : ''),\n            })}\n          >\n            {this.renderCommentHeader(comment)}\n            {this.renderCommentBody(comment)}\n          </Card>\n        ))}\n      </div>\n    );\n  }\n}\n\nComments.propTypes = propTypes;\nComments.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}