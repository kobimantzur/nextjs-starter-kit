{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { Page, AppSpinner } from '../../components';\nimport { getPlaceDetails, navigateSearchBySubCategory } from '../../reducers/Search/actions';\nimport { CountryHeader, CitiesPicker, InfoCards } from './Components';\nimport SubCategoryPicker from '../../components/SubCategoryPicker';\nimport Content from '../../components/Content';\nimport FancyTitle from '../../components/FancyTitle';\n\nvar PlacePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlacePage, _Component);\n\n  function PlacePage() {\n    _classCallCheck(this, PlacePage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlacePage).apply(this, arguments));\n  }\n\n  _createClass(PlacePage, [{\n    key: \"componentDidUpdate\",\n    // componentDidMount() {\n    //   const { match } = this.props;\n    //   const { placeId } = match.params;\n    //   if (!placeId) return this.props.push('/');\n    //   this.props.getPlaceDetails(placeId);\n    // }\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.location !== prevProps.location) {\n        var match = this.props.match;\n        var placeId = match.params.placeId;\n        if (!placeId) return this.props.push('/');\n        this.props.getPlaceDetails(placeId);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          selectedPlace = _this$props.selectedPlace,\n          isLoading = _this$props.isLoading;\n      var highlightedTitle = '';\n\n      if (selectedPlace) {\n        highlightedTitle = \"\".concat(selectedPlace.heName); // if (selectedPlace.country && typeof selectedPlace.country === 'object') {\n        //   highlightedTitle += `, ${selectedPlace.country.heName}`;\n        // }\n      }\n\n      return __jsx(Page, {\n        className: \"place-page\"\n      }, isLoading && __jsx(AppSpinner, null), !isLoading && __jsx(Content, null, selectedPlace && __jsx(FancyTitle, {\n        highlightedTitle: \"\".concat(highlightedTitle, \".\"),\n        regularTitle: \"\\u05DB\\u05DC \\u05DE\\u05D4 \\u05E9\\u05E8\\u05E6\\u05D9\\u05EA\\u05DD \\u05DC\\u05D3\\u05E2\\u05EA \\u05E2\\u05DC\"\n      }), __jsx(SubCategoryPicker, this.props), __jsx(InfoCards, this.props), __jsx(CitiesPicker, this.props)));\n    }\n  }]);\n\n  return PlacePage;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var SearchReducer = _ref.SearchReducer;\n  var isLoading = SearchReducer.isLoading,\n      selectedPlace = SearchReducer.selectedPlace,\n      citiesList = SearchReducer.citiesList,\n      subCategoriesList = SearchReducer.subCategoriesList;\n  return {\n    isLoading: isLoading,\n    selectedPlace: selectedPlace,\n    citiesList: citiesList,\n    subCategoriesList: subCategoriesList\n  };\n};\n\nvar mapDispatchToProps = {\n  getPlaceDetails: getPlaceDetails,\n  push: push,\n  navigateSearchBySubCategory: navigateSearchBySubCategory\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlacePage);","map":null,"metadata":{},"sourceType":"module"}