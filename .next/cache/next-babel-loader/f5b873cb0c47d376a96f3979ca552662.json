{"ast":null,"code":"import axios from 'axios';\nimport * as types from './constants';\nimport { reportEvent } from '../../services/analyticsService';\nexport function cleanBusinessPage() {\n  return {\n    type: types.SET_BUSINESS,\n    payload: {\n      isLoading: false,\n      business: undefined\n    }\n  };\n}\nexport const setEmptyState = () => ({\n  type: types.SET_EMPTY_STATE\n});\nexport const fetchBusinessByFriendlyUrl = friendlyUrl => {\n  return axios.get(types.GET_BY_FRIENDLY_URL, {\n    params: {\n      friendlyUrl\n    }\n  });\n};\nexport const getBusinessByFriendlyUrl = friendlyUrl => async dispatch => {\n  // if (window.business) {\n  //   return dispatch({\n  //     type: types.SET_BUSINESS,\n  //     payload: { business: window.business },\n  //   });\n  // }\n  const response = await fetchBusinessByFriendlyUrl(friendlyUrl);\n\n  if (!response || !response.data) {} // TODO: notify error\n  // document.title = `Avartii | ${response.data.englishName}`;\n\n\n  dispatch({\n    type: types.SET_BUSINESS,\n    payload: {\n      business: response.data\n    }\n  });\n};\nexport const submitBusinessReview = data => dispatch => {\n  axios.post(types.SUBMIT_BUSINESS_REVIEW_URL, data).then(response => {\n    reportEvent({\n      category: 'ReviewModal',\n      action: 'Complete'\n    });\n    dispatch({\n      type: types.SET_REVIEWS,\n      payload: {\n        reviewsList: response.data.reviewsList,\n        userReview: response.data.userReview\n      }\n    }); // TODO: show success message\n    // TODO: append the comment on top of all comments\n  }).catch(e => {\n    console.log(e);\n  });\n};\nexport function setReviewModalState(isReviewModalOpen) {\n  reportEvent({\n    category: 'ReviewModal',\n    action: isReviewModalOpen ? 'ModalOpen' : 'ModalClose'\n  });\n  return {\n    type: types.SET_REVIEW_MODAL_STATE,\n    payload: {\n      isReviewModalOpen\n    }\n  };\n}\nexport function setReviewLoadingState(isReviewLoading) {\n  return {\n    type: types.SET_REVIEW_LOADING_STATE,\n    payload: {\n      isReviewLoading\n    }\n  };\n}","map":{"version":3,"sources":["/Users/kobimantzur/mapo/hello-next/src/reducers/BusinessPage/actions.js"],"names":["axios","types","reportEvent","cleanBusinessPage","type","SET_BUSINESS","payload","isLoading","business","undefined","setEmptyState","SET_EMPTY_STATE","fetchBusinessByFriendlyUrl","friendlyUrl","get","GET_BY_FRIENDLY_URL","params","getBusinessByFriendlyUrl","dispatch","response","data","submitBusinessReview","post","SUBMIT_BUSINESS_REVIEW_URL","then","category","action","SET_REVIEWS","reviewsList","userReview","catch","e","console","log","setReviewModalState","isReviewModalOpen","SET_REVIEW_MODAL_STATE","setReviewLoadingState","isReviewLoading","SET_REVIEW_LOADING_STATE"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEH,KAAK,CAACI,YADP;AAELC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,QAAQ,EAAEC;AAA9B;AAFJ,GAAP;AAID;AAED,OAAO,MAAMC,aAAa,GAAG,OAAO;AAClCN,EAAAA,IAAI,EAAEH,KAAK,CAACU;AADsB,CAAP,CAAtB;AAIP,OAAO,MAAMC,0BAA0B,GAAIC,WAAD,IAAiB;AACzD,SAAOb,KAAK,CACXc,GADM,CACFb,KAAK,CAACc,mBADJ,EACyB;AAC9BC,IAAAA,MAAM,EAAE;AACNH,MAAAA;AADM;AADsB,GADzB,CAAP;AAMD,CAPM;AASP,OAAO,MAAMI,wBAAwB,GAAGJ,WAAW,IAAI,MAAOK,QAAP,IAAoB;AACzE;AACA;AACA;AACA;AACA;AACA;AAEE,QAAMC,QAAQ,GAAG,MAAMP,0BAA0B,CAACC,WAAD,CAAjD;;AACE,MAAI,CAACM,QAAD,IAAa,CAACA,QAAQ,CAACC,IAA3B,EAAiC,CAEhC,CAFD,CACE;AAEF;;;AACAF,EAAAA,QAAQ,CAAC;AACPd,IAAAA,IAAI,EAAEH,KAAK,CAACI,YADL;AAEPC,IAAAA,OAAO,EAAE;AAAEE,MAAAA,QAAQ,EAAEW,QAAQ,CAACC;AAArB;AAFF,GAAD,CAAR;AAIL,CAjBM;AAmBP,OAAO,MAAMC,oBAAoB,GAAGD,IAAI,IAAKF,QAAD,IAAc;AACxDlB,EAAAA,KAAK,CACFsB,IADH,CACQrB,KAAK,CAACsB,0BADd,EAC0CH,IAD1C,EAEGI,IAFH,CAESL,QAAD,IAAc;AAClBjB,IAAAA,WAAW,CAAC;AACVuB,MAAAA,QAAQ,EAAE,aADA;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAAD,CAAX;AAIAR,IAAAA,QAAQ,CAAC;AACPd,MAAAA,IAAI,EAAEH,KAAK,CAAC0B,WADL;AAEPrB,MAAAA,OAAO,EAAE;AAAEsB,QAAAA,WAAW,EAAET,QAAQ,CAACC,IAAT,CAAcQ,WAA7B;AAA0CC,QAAAA,UAAU,EAAEV,QAAQ,CAACC,IAAT,CAAcS;AAApE;AAFF,KAAD,CAAR,CALkB,CASlB;AACA;AACD,GAbH,EAcGC,KAdH,CAcUC,CAAD,IAAO;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,GAhBH;AAiBD,CAlBM;AAoBP,OAAO,SAASG,mBAAT,CAA6BC,iBAA7B,EAAgD;AACrDjC,EAAAA,WAAW,CAAC;AACVuB,IAAAA,QAAQ,EAAE,aADA;AAEVC,IAAAA,MAAM,EAAES,iBAAiB,GAAG,WAAH,GAAiB;AAFhC,GAAD,CAAX;AAIA,SAAO;AACL/B,IAAAA,IAAI,EAAEH,KAAK,CAACmC,sBADP;AAEL9B,IAAAA,OAAO,EAAE;AAAE6B,MAAAA;AAAF;AAFJ,GAAP;AAID;AAED,OAAO,SAASE,qBAAT,CAA+BC,eAA/B,EAAgD;AACrD,SAAO;AACLlC,IAAAA,IAAI,EAAEH,KAAK,CAACsC,wBADP;AAELjC,IAAAA,OAAO,EAAE;AAAEgC,MAAAA;AAAF;AAFJ,GAAP;AAID","sourcesContent":["import axios from 'axios';\nimport * as types from './constants';\nimport { reportEvent } from '../../services/analyticsService';\n\nexport function cleanBusinessPage() {\n  return {\n    type: types.SET_BUSINESS,\n    payload: { isLoading: false, business: undefined },\n  };\n}\n\nexport const setEmptyState = () => ({\n  type: types.SET_EMPTY_STATE,\n});\n\nexport const fetchBusinessByFriendlyUrl = (friendlyUrl) => {\n  return axios\n  .get(types.GET_BY_FRIENDLY_URL, {\n    params: {\n      friendlyUrl,\n    },\n  });\n}\n\nexport const getBusinessByFriendlyUrl = friendlyUrl => async (dispatch) => {\n  // if (window.business) {\n  //   return dispatch({\n  //     type: types.SET_BUSINESS,\n  //     payload: { business: window.business },\n  //   });\n  // }\n  \n    const response = await fetchBusinessByFriendlyUrl(friendlyUrl);\n      if (!response || !response.data) {\n        // TODO: notify error\n      }\n      // document.title = `Avartii | ${response.data.englishName}`;\n      dispatch({\n        type: types.SET_BUSINESS,\n        payload: { business: response.data },\n      });\n};\n\nexport const submitBusinessReview = data => (dispatch) => {\n  axios\n    .post(types.SUBMIT_BUSINESS_REVIEW_URL, data)\n    .then((response) => {\n      reportEvent({\n        category: 'ReviewModal',\n        action: 'Complete',\n      });\n      dispatch({\n        type: types.SET_REVIEWS,\n        payload: { reviewsList: response.data.reviewsList, userReview: response.data.userReview },\n      });\n      // TODO: show success message\n      // TODO: append the comment on top of all comments\n    })\n    .catch((e) => {\n      console.log(e);\n    });\n};\n\nexport function setReviewModalState(isReviewModalOpen) {\n  reportEvent({\n    category: 'ReviewModal',\n    action: isReviewModalOpen ? 'ModalOpen' : 'ModalClose',\n  });\n  return {\n    type: types.SET_REVIEW_MODAL_STATE,\n    payload: { isReviewModalOpen },\n  };\n}\n\nexport function setReviewLoadingState(isReviewLoading) {\n  return {\n    type: types.SET_REVIEW_LOADING_STATE,\n    payload: { isReviewLoading },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}