{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { push } from 'connected-react-router';\nimport { getRequest } from '../../services/requestService';\nimport * as types from './types';\nimport { buildSearchUrl } from '../../services/urlBuilderService';\nexport const getCountries = () => async dispatch => {\n  const res = await getRequest('/placements/getPlacementsData');\n  dispatch({\n    type: types.SET_COUNTRIES,\n    payload: _objectSpread({\n      isLoading: false\n    }, res.data)\n  });\n};\nexport const getPlaceDetails = placeId => async dispatch => {\n  const res = await getRequest(`/placements/getPlaceDetails?placeId=${placeId}`);\n  console.log(res);\n  dispatch({\n    type: types.SET_PLACE_DETAILS,\n    payload: _objectSpread({\n      isLoading: false\n    }, res.data)\n  });\n};\nexport function setSearchModalState(isSearchOpen) {\n  return {\n    type: types.SET_MODAL_STATE,\n    payload: {\n      isSearchOpen\n    }\n  };\n}\nexport const searchQuery = (query = '') => async dispatch => {\n  const firstPayload = {\n    isSearchLoading: true,\n    query\n  };\n\n  if (!query) {\n    firstPayload.autocompleteList = [];\n    firstPayload.isSearchLoading = false;\n  }\n\n  dispatch({\n    type: types.SEARCH_QUERY,\n    payload: firstPayload\n  });\n\n  if (query) {\n    const res = await getRequest(`webSearch/searchByQuery?query=${query}`);\n    dispatch({\n      type: types.SEARCH_QUERY,\n      payload: {\n        autocompleteList: res.data,\n        isSearchLoading: false\n      }\n    });\n  }\n};\nexport const navigateSearchBySubCategory = (selectedPlace, subCategory) => async dispatch => {\n  const targetUrl = buildSearchUrl({\n    placeId: selectedPlace._id,\n    subCategoryId: subCategory._id\n  });\n  dispatch(push(targetUrl));\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload: {\n      isLoading: true,\n      selectedSubCategory: subCategory\n    }\n  });\n};\nexport const searchBySubCategory = (placeId, subCategoryId) => async dispatch => {\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload: {\n      isLoading: true\n    }\n  });\n  const res = await getRequest(`webSearch/searchBySubCategory?placeId=${placeId}&subCategoryId=${subCategoryId}`);\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload: _objectSpread({\n      isLoading: false\n    }, res.data)\n  });\n};","map":{"version":3,"sources":["/Users/kobimantzur/mapo/hello-next/src/reducers/Search/actions.js"],"names":["push","getRequest","types","buildSearchUrl","getCountries","dispatch","res","type","SET_COUNTRIES","payload","isLoading","data","getPlaceDetails","placeId","console","log","SET_PLACE_DETAILS","setSearchModalState","isSearchOpen","SET_MODAL_STATE","searchQuery","query","firstPayload","isSearchLoading","autocompleteList","SEARCH_QUERY","navigateSearchBySubCategory","selectedPlace","subCategory","targetUrl","_id","subCategoryId","SEARCH_SUB_CATEGORY","selectedSubCategory","searchBySubCategory"],"mappings":"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","sourcesContent":["import { push } from 'connected-react-router';\nimport { getRequest } from '../../services/requestService';\nimport * as types from './types';\nimport { buildSearchUrl } from '../../services/urlBuilderService';\n\nexport const getCountries = () => async dispatch => {\n  const res = await getRequest('/placements/getPlacementsData');\n  dispatch({ type: types.SET_COUNTRIES, payload: { isLoading: false, ...res.data } });\n};\n\nexport const getPlaceDetails = placeId => async dispatch => {\n  const res = await getRequest(`/placements/getPlaceDetails?placeId=${placeId}`);\n  console.log(res);\n  dispatch({ type: types.SET_PLACE_DETAILS, payload: { isLoading: false, ...res.data } });\n};\n\nexport function setSearchModalState(isSearchOpen) {\n  return {\n    type: types.SET_MODAL_STATE,\n    payload: { isSearchOpen }\n  };\n}\n\nexport const searchQuery = (query = '') => async dispatch => {\n  const firstPayload = { isSearchLoading: true, query };\n  if (!query) {\n    firstPayload.autocompleteList = [];\n    firstPayload.isSearchLoading = false;\n  }\n  dispatch({ type: types.SEARCH_QUERY, payload: firstPayload });\n  if (query) {\n    const res = await getRequest(`webSearch/searchByQuery?query=${query}`);\n    dispatch({\n      type: types.SEARCH_QUERY,\n      payload: { autocompleteList: res.data, isSearchLoading: false }\n    });\n  }\n};\n\nexport const navigateSearchBySubCategory = (selectedPlace, subCategory) => async dispatch => {\n  const targetUrl = buildSearchUrl({\n    placeId: selectedPlace._id,\n    subCategoryId: subCategory._id\n  });\n  dispatch(push(targetUrl));\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload: { isLoading: true, selectedSubCategory: subCategory }\n  });\n};\n\nexport const searchBySubCategory = (placeId, subCategoryId) => async dispatch => {\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload: { isLoading: true }\n  });\n  const res = await getRequest(\n    `webSearch/searchBySubCategory?placeId=${placeId}&subCategoryId=${subCategoryId}`\n  );\n  dispatch({\n    type: types.SEARCH_SUB_CATEGORY,\n    payload: { isLoading: false, ...res.data }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}