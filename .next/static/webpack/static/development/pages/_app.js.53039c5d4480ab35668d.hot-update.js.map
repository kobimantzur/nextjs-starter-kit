{"version":3,"file":"static/webpack/static/development/pages/_app.js.53039c5d4480ab35668d.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["// pages/_app.js\nimport React from \"react\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport App from \"next/app\";\nimport withRedux from \"next-redux-wrapper\";\nimport createRootReducer from \"../reducers\";\nimport thunk from \"redux-thunk\";\nconst composeEnhancer = compose;\n// import { createBrowserHistory } from \"history\";\n// const reducer = (state = { foo: \"\" }, action) => {\n//   switch (action.type) {\n//     case \"FOO\":\n//       return { ...state, foo: action.payload };\n//     default:\n//       return state;\n//   }\n// };\n// export const history = createBrowserHistory();\n/**\n * @param {object} initialState\n * @param {boolean} options.isServer indicates whether it is a server side or client side\n * @param {Request} options.req NodeJS Request object (not set when client applies initialState from server)\n * @param {Request} options.res NodeJS Request object (not set when client applies initialState from server)\n * @param {boolean} options.debug User-defined debug mode param\n * @param {string} options.storeKey This key will be used to preserve store in global namespace for safe HMR\n */\nconst makeStore = (initialState, options) => {\n  return createStore(\n    createRootReducer,\n    initialState,\n    composeEnhancer(applyMiddleware(thunk))\n  );\n};\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    // we can dispatch from here too\n    ctx.store.dispatch({ type: \"FOO\", payload: \"foo\" });\n\n    const pageProps = Component.getInitialProps\n      ? await Component.getInitialProps(ctx)\n      : {};\n\n    return { pageProps };\n  }\n\n  render() {\n    const { Component, pageProps, store } = this.props;\n    return (\n      <Provider store={store}>\n        <Component {...pageProps} />\n      </Provider>\n    );\n  }\n}\n\nexport default withRedux(makeStore)(MyApp);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AAQA;AACA;AAKA;AACA;AACA;;;;;;;;;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;AAlBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AACA;;;;;;;AAAA;AACA;;AAHA;AAIA;AAAA;AAAA;AACA;;;;;;;;;;;AAVA;AACA;AAqBA;;;;A","sourceRoot":""}