{"version":3,"file":"static/webpack/static/development/pages/place/[placeId]/[friendlyUrl].js.0ae04a549c4f002d361d.hot-update.js","sources":["webpack:///./src/containers/PlacePage/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { Page, AppSpinner } from '../../components';\nimport { getPlaceDetails, navigateSearchBySubCategory } from '../../reducers/Search/actions';\nimport { CountryHeader, CitiesPicker, InfoCards } from './Components';\nimport SubCategoryPicker from '../../components/SubCategoryPicker';\nimport Content from '../../components/Content';\nimport FancyTitle from '../../components/FancyTitle';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport { buildPlaceUrl } from '../../services/urlBuilderService';\n\nclass PlacePage extends Component {\n  // componentDidMount() {\n  //   const { match } = this.props;\n  //   const { placeId } = match.params;\n  //   if (!placeId) return this.props.push('/');\n  //   this.props.getPlaceDetails(placeId);\n  // }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      const { match } = this.props;\n      const { placeId } = match.params;\n      if (!placeId) return this.props.push('/');\n      this.props.getPlaceDetails(placeId);\n    }\n  }\n  getBreadcrumbsData() {\n    const { selectedPlace } = this.props;\n    let items = [];\n\n    if (selectedPlace && selectedPlace.country) {\n      items.push({\n        title: selectedPlace.country.heName,\n        link: buildPlaceUrl(selectedPlace.country),\n        placeObject: selectedPlace.country\n      });\n    }\n\n    items.push({\n      title: selectedPlace.heName,\n      isHighlighted: true\n    });\n\n    return items;\n  }\n\n  render() {\n    const { selectedPlace, isLoading } = this.props;\n    let highlightedTitle = '';\n    if (selectedPlace) {\n      highlightedTitle = `${selectedPlace.heName}`;\n      // if (selectedPlace.country && typeof selectedPlace.country === 'object') {\n      //   highlightedTitle += `, ${selectedPlace.country.heName}`;\n      // }\n    }\n\n    return (\n      <Page className=\"place-page\">\n        {isLoading && <AppSpinner />}\n        {!isLoading && (\n          <Content>\n            {selectedPlace && (\n              <React.Fragment>\n                <FancyTitle\n                  highlightedTitle={`${highlightedTitle}.`}\n                  regularTitle=\"כל מה שרציתם לדעת על\"\n                />\n                <Breadcrumbs items={this.getBreadcrumbsData()} />\n              </React.Fragment>\n            )}\n            <SubCategoryPicker {...this.props} />\n            <InfoCards {...this.props} />\n            <CitiesPicker {...this.props} />\n          </Content>\n        )}\n      </Page>\n    );\n  }\n}\nconst mapStateToProps = ({ SearchReducer }) => {\n  const { isLoading, selectedPlace, citiesList, subCategoriesList } = SearchReducer;\n  return {\n    isLoading,\n    selectedPlace,\n    citiesList,\n    subCategoriesList\n  };\n};\nconst mapDispatchToProps = {\n  getPlaceDetails,\n  push,\n  navigateSearchBySubCategory\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlacePage);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;;;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AAFA;AAIA;AAAA;AAUA;;;;AAnEA;AACA;AAoEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;;;;A","sourceRoot":""}